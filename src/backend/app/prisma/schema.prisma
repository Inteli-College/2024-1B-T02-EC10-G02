generator client {
    provider  = "prisma-client-py"
    interface = "asyncio"
    recursive_type_depth = 5
}

datasource db {
    provider = "sqlite" // postgresql
    url      = "file:./db.db" // env("DATABASE_URL") 
}

// enum Role {
//     NURSE
//     ASSISTANT
//     ADMIN
// }

// enum Status {
//     PENDING
//     ACCEPTED
//     REJECTED
//     DONE
//     CANCELED
// }

model User {
    id                Int        @id @default(autoincrement())
    name              String
    password          String
    // role              Role[]     @default([NURSE])
    role              String
    
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
    deletedAt         DateTime?

    feedback_sent     Feedback[] @relation("feedbacks_sent")
    feedback_received Feedback[] @relation("feedbacks_received")
    request_sent      Request[]  @relation("request_sent")
    request_received  Request[]  @relation("request_received")
    request_canceled  Request[] @relation("request_canceled")
}

model Feedback {
    id              Int       @id @default(autoincrement())
    message_user    String?
    message_app     String?
    rate_user       Int
    rate_app        Int?
    
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?

    Request         Request[]
    sender_user     User      @relation("feedbacks_sent", fields: [sender_userId], references: [id])
    sender_userId   Int
    receiver_user   User      @relation("feedbacks_received", fields: [receiver_userId], references: [id])
    receiver_userId Int
}

model Request {
    id              Int             @id @default(autoincrement())
    medication             Medications     @relation(fields: [medicationId], references: [id])
    medicationId           Int
    status          String
    
    sender_user     User            @relation("request_sent", fields: [sender_userId], references: [id])
    sender_userId   Int
    receiver_user   User?           @relation("request_received", fields: [receiver_userId], references: [id])
    receiver_userId Int?

    feedback        Feedback?       @relation(fields: [feedbackId], references: [id])
    feedbackId      Int?

    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    canceledAt      DateTime?
    canceledBy      User?           @relation("request_canceled", fields: [canceled_userId], references: [id])
    canceled_userId Int?
    canceled_reason String?
}

model Medications {
    id          Int       @id @default(autoincrement())
    area        String?
    description String? 
    lot         Int
    medClass       String
    Requests  Request[]
}

model Logs {
    id Int @id @default(autoincrement())
}
