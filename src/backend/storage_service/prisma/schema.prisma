generator client {
    provider             = "prisma-client-py"
    interface            = "asyncio"
    recursive_type_depth = 5
}

datasource db {
    provider = "postgresql"//"sqlite" DATABASE_URL = postgres://postgres:grupo02@0.0.0.0:5432/postgres
    url      = "postgres://postgres.wrftveqnrqsolcpblwuj:upYSm1mENNr7FDyW@aws-0-sa-east-1.pooler.supabase.com:5432/postgres"  //file:./db.db // env("DATABASE_URL")
    directUrl = "postgres://postgres.wrftveqnrqsolcpblwuj:upYSm1mENNr7FDyW@aws-0-sa-east-1.pooler.supabase.com:6543/postgres/?pgbouncer=true&connection_limit=1"
}

enum Role {
    NURSE
    ASSISTANT
    ADMIN
}

enum Status {
    PENDING
    ACCEPTED
    REJECTED
    DONE
    CANCELED
}

model User {
    id       String  @id @default(uuid())
    name     String
    email    String
    password String
    role              Role[]     @default([NURSE])
    //role     String?
    disponibility   Boolean @default(false)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    feedback_sent     Feedback[] @relation("feedbacks_sent")
    feedback_received Feedback[] @relation("feedbacks_received")
    order_sent        Order[]    @relation("order_sent")
    order_received    Order[]    @relation("order_received")
    order_canceled    Order[]    @relation("order_canceled")
}

model Feedback {
    id           String   @id @default(uuid())
    message_user String?
    message_app  String?
    rate_user    Int
    rate_app     Int?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    Order           Order[]
    sender_user     User    @relation("feedbacks_sent", fields: [sender_userId], references: [id])
    sender_userId   String
    receiver_user   User    @relation("feedbacks_received", fields: [receiver_userId], references: [id])
    receiver_userId String
}

model Order {
    id           String   @id @default(uuid())
    medication   Medications? @relation(fields: [medicationId], references: [id])
    medicationId String?
    status       Status[]     @default([PENDING])

    sender_user     User?   @relation("order_sent", fields: [sender_userId], references: [id])
    sender_userId   String?
    receiver_user   User?  @relation("order_received", fields: [receiver_userId], references: [id])
    receiver_userId String?
   

    feedback   Feedback? @relation(fields: [feedbackId], references: [id])
    feedbackId String?
    
    createdAt DateTime @default(now())
    updatedAt DateTime? @updatedAt

    canceledAt      DateTime?
    canceledBy      User?     @relation("order_canceled", fields: [canceled_userId], references: [id])
    canceled_userId String?
    canceled_reason String?
    canceled        Boolean?   @default(false)

    deleted Boolean? @default(false)
}

model Medications {
    id          String   @id @default(uuid())
    area        String?
    description String?
    lot         Int
    medClass    String
    Orders      Order[]
}

model Logs {
    id Int @id @unique @default(autoincrement())
}
